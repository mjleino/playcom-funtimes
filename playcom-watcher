#!/bin/bash
#
# monitor play.com for good deals
#
# inspiration for bash stuffs: http://github.com/sampula/muumi-dl
#
# usage: playcom-watcher.sh [playcom.list]
# 
# configuration: 
#  1) put your email address here
YOUR_EMAIL=mrgoldnuggets@example.org
#  2) list interesting products into playcom.list (see it for instructions) 
#  3) DONE!

# checks whether the price is below the limit. supports floating point numbers!
# usage: deal-is-on price limit
# returns: 
# 	0 if price is below the limit
#	1 if not 
# 	2 not enough parameters
deal-is-on () {
	# TODO: this conditional list where ||Â is before && might fail?
	[ -z $1 ] || [ -z $2 ] && return 2
	local price=$1
	local limit=$2

	# && and || are the wrong way round because bc writes 1 to stdout when the expression is true
	# which is the exact opposite what && and || expect
	echo "$price < $limit" | bc | exit $(</dev/stdin) &&
		return 1 ||
		return 0
}

# adds/updates the saved price in playcom.prices
# usage: update-price id price [playcom.prices]
# TODO: using sed in place edit presents tiny hazard corrupting the file :) :)
update-price () {
	[ "$2" ] || return 2
	local id=$1
	local price=$2
	local list=${3:-$dir/playcom.prices}

	grep -q "^$id.*" $list && {
		# if price exists, update (all) price instances
		sed -i.bakup "s/^$id.*/$id\t$price/g" $list
	} || {
		# now price was found, add one now
		echo -e "$id\t$price" >> $list
	}
}

# sends the notification email
# usage: notify product price limit url
notify () {
	[ -z "$1" ] || 
		[ -z $2 ] || 
		[ -z $3 ] || 
		[ -z $4 ] && return 2
	local product=$1
	local price=$2
	local limit=$3
	local url=$4

	# we default arbitrarily to EUR
	local gbp="cur=257"
	local eur="cur=258"
	local currency="EUR"
	[[ $url = *$gbp* ]] && currency="GBP"

	# TODO: using eval on the template presents a tiny hazard of very bad things happening.
	eval "echo \"$(<$dir/playcom.mail)\"" | 
	mail -s "playcom-watcher: $product" $YOUR_EMAIL -- -F "playcom-watcher"

	log "EMAILED NOTIFICATION FOR $product TO $YOUR_EMAIL" $logfile
}

# writes msg to the log
# usage: log msg [logfile]
log () {
	[ -z "$1" ] && return 2
	local msg=$1
	local logfile=${2-$logfile}

	echo $(date "+%y-%m-%d %H:%M:%S") $msg >> $logfile
} 

dir=$(dirname $0)

[ "$1" ] && list=$1 || list=$dir/playcom.list
[ -f "$list" ] || {
	echo "playcom-watcher ERROR: $list not found"
	exit 1
}

pricelist=$dir/playcom.prices

# NOTE: /var/log is not writeable, so if log file is not already presesent just put it to script dir
logfile=/var/log/playcom.log
[ -w $logfile ] || logfile=$dir/playcom.log

log "STARTING" $logfile

# PROCESS playcom.list & DO THE STUFF

# if playcom.list is updated or playcom.prices not found, reset _all_ saved prices? (TODO: not _all_)
if [ $list -nt $pricelist ]; then
	log "$list is newer than $pricelist, resetting saved prices"

	cat > $pricelist <<-TAC
		# this file is automatically added & updated by playcom-wathcer, so
		# EDIT AT OWN RISK!!!
	TAC
fi

# strip empty lines and #comments (note verbatim tab in sed expression)
sed 's/#.*//; /^[ 	]*$/d;' $list | while read url limit; do
	id=$(echo $url | sed -e 's/.*\/\(.*\)\/.*\/Product\.html.*/\1/')
	product=$(echo $url | sed -e 's/.*\/\(.*\)\/Product\.html.*/\1/' -e 's/-/ /g')
	#price=$(wget -qO - $url | 
	price=$(curl -s $url |
				grep 'price"><strong class' |
				tr -dc '[:print:]' |
				sed -e 's/.*&#[0-9]\{3,4\};//'\
				    -e 's#</[a-z]*>##g')

	# if old price is saved, use it as limit
	oldprice=$(grep "^$id.*" $pricelist | cut -f2)
	[ "$oldprice" ] && limit=$oldprice

	if [ -z "$limit" ]; then
		log "no saved price/limit for $product ($id), saving it now: $price"
		# NOTE: no notification is sent from this event
		update-price $id $price

	elif deal-is-on $price $limit; then
		log "FOUND A DEAL! $product ($id) is going at $price :-)"
		notify "$product" $price $limit $url
		update-price $id $price

	else
		log "TOO BAD! $product ($id) at $price is over or at the limit of $limit"
	fi
done

log "FINISHED" $logfile
